List<int>[,] Possibilities = new List<int>[9,9];
possibilites[a,b] = new List<int>();
 



require "math"

local values_board = {
    {"3","2","1","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
}


local function remove_from_pool (str, character)
    local remaining = ""
    if string.find(str, character) then
        remaining = string.gsub(str, character, "")
    else
        remaining = str
    end
    
    return remaining
end    

local function store_entropy (table) -- pass value_board 
    local entropy_table = {}
    
    -- MAKE ENTROPY MATRIX
    for i=1,10 do
        entropy_table[i] = {}
        for j=1,10 do
            entropy_table[i][j] = "123456789"
        end
    end

    for current_column, column_value in ipairs(table) do
        for current_row, row_value in ipairs(column_value) do
            -- check if blank then no value yet
            if #values_board[current_column][current_row] == 0 then
                -- no need to scan
                
            -- if not blank
            else
                -- scan row
                for i = 1,10 do
                    local number_in_slot = values_board[current_column][current_row]
                    local new_possibilities = remove_from_pool(entropy_table[current_column][i], number_in_slot)
                    entropy_table[current_column][i] = new_possibilities
                    
                    -- if scanned the same slot
                    if i == current_row then
                        entropy_table[current_column][current_row] = ""
                    end
                    
                end
                
                -- scan column
                for i = 1,10 do
                    local number_in_slot = values_board[current_column][current_row]
                    local new_possibilities = remove_from_pool(entropy_table[i][current_row], number_in_slot)
                    entropy_table[i][current_row] = new_possibilities
                    
                    -- if scanned the same slot
                    if i == current_column then
                        entropy_table[current_column][current_row] = ""
                    end
                    
                end
                
                -- scan matrix
                
                local startRow = math.floor((current_row - 1) / 3) * 3 + 1
                local startCol = math.floor((current_column - 1) / 3) * 3 + 1
                for rowOffset = 0,2 do 
                    for colOffset = 0,2 do 
                        local number_in_slot = values_board[current_column][current_row]
                        print(startCol + colOffset)
                        local new_possibilities = remove_from_pool(entropy_table[startCol + colOffset][startRow + rowOffset], number_in_slot)
                        entropy_table[startCol + colOffset][startRow + rowOffset] = new_possibilities

                        -- if scanned the same slot
                        if (startRow + rowOffset) == current_row then
                            if (startCol + colOffset) == current_column then
                                entropy_table[current_column][current_row] = ""   
                            end
                        end
                        
                    end
                end
                --------------------------
            end

        end
    end

    return entropy_table
end

-- FIND COORDINATES WITH THE LOWEST ENTROPY
-- LOCATE THAT COORDINATE
-- GENERATE NUM FROM THE STRING OF POSSIBILITIES

print("SUDOKU ")
for i, v in ipairs(values_board) do
    for j, k in ipairs(v) do
        io.write(k.. "\t")
    end
    print()
end

print()

print("POSSIBILITY ")
local test = store_entropy(values_board)
for i, v in ipairs(store_entropy(values_board)) do
    for j, k in ipairs(v) do
        io.write(string.len(k).. "\t")
    end
    print()
end

--prints the lenght of the string
--print(#values_board[2][1])

