require "math"

local values_board = {
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
    {"","","","","","","","","",""},
}

-- create the matrix
local P_B = {}          
for i=1,10 do
    P_B[i] = {}
    for j=1,10 do
        P_B[i][j] = "123456789"
    end
end

--[[
for i, v in ipairs(values_board) do
    for j, k in ipairs(v) do
        values_board[i][j] = "123456789"
    end
    print()
end
]]--

local function remove_from_pool (str, character)
    local remaining = ""
    if string.find(str, character) then
        remaining = string.gsub(str, character, "")
    else
        remaining = str
    end
    
    return remaining
end    

--[[
if string.find(k,NUM_GENERATED) then
    k = string.gsub(k, NUM_GENERATED, "")
    print(k)
end
]]--

--??
-- REMOVES NUMBER GENERATED FROM THE POSSIBILITIES STRING ( PSEUDO TABLE ) TO THE P_B ARRAY
       -- print("J: "..P_B[i][j])
       -- print("STRING LEN "..string.len(k).. " NUM_GENERATED: ".. NUM_GENERATED)
       
       
for i, v in ipairs(P_B) do
    for j, k in ipairs(v) do
        local NUM_GENERATED = math.random(1,string.len(k))
        local new_possibilities = remove_from_pool(k, NUM_GENERATED)
        P_B[i][j] = new_possibilities
        --io.write(new_possibilities.. "\t")
    end
    print()
end




-- FOR EVERY SLOT POPULATED
-- VISIT ALL ROWS
-- VISIT ALL COLUMN
-- VISIT ALL MATRIX
-- UPDATE POSSIBILITIES
-- CALCULATE ENTROPY
-- STORE COORDINATES OF ENTROPY IN TABLE


--init possibilities
for i, v in ipairs(values_board) do
    for j, k in ipairs(v) do
        --io.write(#k.. "\t")
        for j=1,10 do
            P_B[i][j] = "123456789"
        end
    end
    print()
end



local function store_entropy (table) -- pass value_board 
    local entropy_table = {}
    
    -- MAKE ENTROPY MATRIX
    for i=1,10 do
        entropy_table[i] = {}
        for j=1,10 do
            entropy_table[i][j] = "123456789"
        end
    end

    for current_column, column_value in ipairs(table) do
        for current_row, row_value in ipairs(column_value) do
            -- check if blank then no value yet
            if #values_board[current_column][current_row] == 0 then
                -- no need to scan
                
            -- if not blank
            else
                -- scan row
                for i = 1,10 do
                   local number_in_slot = values_board[current_column][current_row] 
                    
                end
                
                -- scan column
                
                
                
                -- scan matrix
            end

        end
        print()
    end

    return entropy_table
end

--prints the lenght of the string
--print(#values_board[2][1])
